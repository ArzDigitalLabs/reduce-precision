<html>

<head>
    <script>
        /**
         * Format numbers in cryptocurrency by arzdigital
         * @param {string} numberString 
         * @param {string} precision auto|high|medium|low
         * @param {string} language en|fa
         * @param {string} template number|usd|irt|irr|percent
         * @param {string} outputFormat plain|html|markdown
         * @param {string} prefixMarker span|i|**|_
         * @param {string} postfixMarker span|i|**|_
         * @param {string} prefix 
         * @param {string} postfix 
         * @return {string} The result of formatting number.
         */
        function formatNumber(numberString, precision = "high", template = "number", language = "en", outputFormat = "plain", prefixMarker = "i", postfixMarker = "i", prefix = "", postfix = "") {
            if (!numberString) return 0;
            numberString = numberString.toString();
            if (!template.match(/^(number|usd|irt|irr|percent)$/g)) template = "number";

            // Replace each Persian/Arabic numeral in the string with its English counterpart and strip all non-numeric chars
            numberString = numberString.replace(/[\u0660-\u0669\u06F0-\u06F9]/g, function (match) {
                return match.charCodeAt(0) & 0xf;
            }).replace(/[^\d.-]/g, "");

            // Stripping leading zeros and trailing zeros after a decimal point
            numberString = numberString.replace(/^0+(?=\d)/g, "").replace(/(?<=\.\d*)0+$|(?<=\.\d)0+\b/g, "");

            let out;
            let number = Math.abs(Number(numberString));
            let p, d, r, c;
            let f = 0;

            // Auto precision selection
            if (precision === "auto") {
                if (template.match(/^(usd|irt|irr)$/g)) {
                    if (number >= 0.0001 && number < 100000000000) {
                        precision = "high";
                    } else {
                        precision = "medium";
                    }
                } else if (template === "number") {
                    precision = "medium";
                } else if (template === "percent") {
                    precision = "low";
                }
            }

            if (precision === "medium") {
                if (number >= 0 && number < 0.0001) {
                    p = 33; d = 4; r = false; c = true;
                } else if (number >= 0.0001 && number < 0.001) {
                    p = 7; d = 4; r = false; c = false;
                } else if (number >= 0.001 && number < 0.01) {
                    p = 5; d = 3; r = false; c = false;
                } else if (number >= 0.001 && number < 0.1) {
                    p = 3; d = 2; r = false; c = false;
                } else if (number >= 0.1 && number < 1) {
                    p = 1; d = 1; r = false; c = false;
                } else if (number >= 1 && number < 10) {
                    p = 3; d = 3; r = false; c = false;
                } else if (number >= 10 && number < 100) {
                    p = 2; d = 2; r = false; c = false;
                } else if (number >= 100 && number < 1000) {
                    p = 1; d = 1; r = false; c = false;
                } else if (number >= 1000) {
                    let x = Math.floor(Math.log10(number)) % 3;
                    p = 2 - x; d = 2 - x; r = true; c = true;
                } else {
                    p = 0; d = 0; r = true; c = true;
                }
            } else if (precision === "low") {
                if (number >= 0 && number < 0.01) {
                    p = 2; d = 0; r = true; c = false; f = 2;
                } else if (number >= 0.01 && number < 0.1) {
                    p = 2; d = 1; r = true; c = false;
                } else if (number >= 0.1 && number < 1) {
                    p = 2; d = 2; r = true; c = false;
                } else if (number >= 1 && number < 10) {
                    p = 2; d = 2; r = true; c = false; f = 2;
                } else if (number >= 10 && number < 100) {
                    p = 1; d = 1; r = true; c = false; f = 1;
                } else if (number >= 100 && number < 1000) {
                    p = 0; d = 0; r = true; c = false;
                } else if (number >= 1000) {
                    let x = Math.floor(Math.log10(number)) % 3;
                    p = 1 - x; d = 1 - x; r = true; c = true;
                } else {
                    p = 0; d = 0; r = true; c = true; f = 2;
                }
            } else { // precision === "high"
                if (number >= 0 && number < 1) {
                    p = 33; d = 4; r = false; c = false;
                } else if (number >= 1 && number < 10) {
                    p = 3; d = 3; r = true; c = false;
                } else if (number >= 10 && number < 100) {
                    p = 2; d = 2; r = true; c = false;
                } else if (number >= 100 && number < 1000) {
                    p = 2; d = 2; r = true; c = false;
                } else if (number >= 1000 && number < 10000) {
                    p = 1; d = 1; r = true; c = false;
                } else {
                    p = 0; d = 0; r = true; c = false;
                }
            }

            return reducePrecision(numberString, p, d, r, c, f, template, language, outputFormat, prefixMarker, postfixMarker, prefix, postfix);
        }

        function reducePrecision(numberString, precision = 30, nonZeroDigits = 4, round = false, compress = false, fixedDecimalZeros = 0, template = "number", language = "en", outputFormat = "plain", prefixMarker = "span", postfixMarker = "span", prefix = "", postfix = "") {
            if (!numberString) return 0;
            numberString = numberString.toString();

            const maxPrecision = 30;
            const maxIntegerDigits = 21;
            const scaleUnits = template.match(/^(number|percent)$/g) ? {
                "": "",
                "K": " هزار",
                "M": " میلیون",
                "B": " میلیارد",
                "T": " تریلیون",
                "Qd": " کادریلیون",
                "Qt": " کنتیلیون",
            } : {
                "": "",
                "K": " هزار ت",
                "M": " میلیون ت",
                "B": " میلیارد ت",
                "T": " همت",
                "Qd": " هزار همت",
                "Qt": " میلیون همت",
            };

            let parts = /^(\-)?(\d+)\.?([0]*)(\d*)$/g.exec(numberString);
            let sign = parts[1] || "";
            let wholeNumberStr = parts[2];
            let fractionalZeroStr = parts[3];
            let fractionalNonZeroStr = parts[4];
            let unitPrefix = "";
            let unitPostfix = "";

            if (fractionalZeroStr.length >= maxPrecision) { // Number is smaller than maximum precision
                fractionalZeroStr = "0".padEnd(maxPrecision - 1, "0");
                fractionalNonZeroStr = "1";
            } else if (fractionalZeroStr.length + nonZeroDigits > precision) { // decrease non-zero digits
                nonZeroDigits = precision - fractionalZeroStr.length;
                if (nonZeroDigits < 1) nonZeroDigits = 1;
            } else if (wholeNumberStr.length > maxIntegerDigits) {
                wholeNumberStr = "0";
                fractionalZeroStr = "";
                fractionalNonZeroStr = "";
            }

            // compress large numbers
            if (compress && wholeNumberStr.length >= 4) {
                const scaleUnitKeys = Object.keys(scaleUnits);
                let scaledWholeNumber = Number(wholeNumberStr);
                let unitIndex = 0;
                while (parseInt(scaledWholeNumber) > 999 && unitIndex < scaleUnitKeys.length - 1) {
                    scaledWholeNumber = (scaledWholeNumber / 1000).toFixed(2);
                    unitIndex++;
                }
                unitPostfix = scaleUnitKeys[unitIndex];
                parts = /^(\-)?(\d+)\.?([0]*)(\d*)$/g.exec(scaledWholeNumber.toString());
                // sign = parts[1] || "";
                wholeNumberStr = parts[2];
                fractionalZeroStr = parts[3];
                fractionalNonZeroStr = parts[4];
            }

            // Truncate the fractional part or round it
            // if (precision > 0 && nonZeroDigits > 0 && fractionalNonZeroStr.length > nonZeroDigits) {
            if (fractionalNonZeroStr.length > nonZeroDigits) {
                if (!round) {
                    fractionalNonZeroStr = fractionalNonZeroStr.substring(0, nonZeroDigits);
                } else {
                    if (parseInt(fractionalNonZeroStr[nonZeroDigits]) < 5) {
                        fractionalNonZeroStr = fractionalNonZeroStr.substring(0, nonZeroDigits);
                    } else {
                        fractionalNonZeroStr = (parseInt(fractionalNonZeroStr.substring(0, nonZeroDigits)) + 1).toString();
                        // If overflow occurs (e.g., 999 + 1 = 1000), adjust the substring length
                        if (fractionalNonZeroStr.length > nonZeroDigits) {
                            if (fractionalZeroStr.length > 0) {
                                fractionalZeroStr = fractionalZeroStr.substring(0, fractionalZeroStr.length - 1);
                            } else {
                                wholeNumberStr = (Number(wholeNumberStr) + 1).toString();
                                fractionalNonZeroStr = fractionalNonZeroStr.substring(1);
                            }
                        }
                    }
                }
            }

            // Using dex style
            if (compress && fractionalZeroStr !== "" && unitPostfix === "") {
                fractionalZeroStr = "0" + fractionalZeroStr.length.toString().replace(/\d/g, function (match) {
                    return ["₀", "₁", "₂", "₃", "₄", "₅", "₆", "₇", "₈", "₉"][parseInt(match, 10)];
                });
            }

            let fractionalPartStr = `${fractionalZeroStr}${fractionalNonZeroStr}`;
            fractionalPartStr = fractionalPartStr.substring(0, precision);
            fractionalPartStr = fractionalPartStr.replace(/^(\d*[1-9])0+$/g, "$1");

            // Output Formating, Prefix, Postfix
            if (template === "usd") {
                unitPrefix = (language === "en") ? "$" : "";
            } else if (template === "irr") {
                if (!unitPostfix) unitPostfix = (language === "fa") ? " ر" : " R";
            } else if (template === "irt") {
                if (!unitPostfix) unitPostfix = (language === "fa") ? " ت" : " T";
            } else if (template === "percent") {
                if (language === "en") {
                    unitPostfix += "%";
                } else {
                    unitPostfix += !unitPostfix ? "٪" : " درصد";
                }
            }
            unitPrefix = prefix + unitPrefix;
            unitPostfix += postfix;
            if (outputFormat === "html") {
                if (unitPrefix) unitPrefix = `<${prefixMarker}>${unitPrefix}</${prefixMarker}>`;
                if (unitPostfix) unitPostfix = `<${postfixMarker}>${unitPostfix}</${postfixMarker}>`;
            } else if (outputFormat === "markdown") {
                if (unitPrefix) unitPrefix = `${prefixMarker}${unitPrefix}${prefixMarker}`;
                if (unitPostfix) unitPostfix = `${postfixMarker}${unitPostfix}${postfixMarker}`;
            }

            const thousandSeparatorRegex = /\B(?=(\d{3})+(?!\d))/g;
            const fixedDecimalZeroStr = fixedDecimalZeros ? ".".padEnd(fixedDecimalZeros + 1, "0") : "";
            let out = "";
            if (precision <= 0 || nonZeroDigits <= 0 || !fractionalNonZeroStr) {
                out = `${sign}${unitPrefix}${wholeNumberStr.replace(thousandSeparatorRegex, ",")}${fixedDecimalZeroStr}${unitPostfix}`;
            } else {
                out = `${sign}${unitPrefix}${wholeNumberStr.replace(thousandSeparatorRegex, ",")}.${fractionalPartStr}${unitPostfix}`;
            }

            // Convert output to Persian numerals if language is "fa"
            if (language === "fa") {
                out = out.replace(/[0-9]/g, c => String.fromCharCode(c.charCodeAt(0) + 1728))
                    .replace(/\,/g, "٬").replace(/\./g, "٫")
                    .replace(/(K|M|B|T|Qt|Qd)/g, function (c) {
                        return scaleUnits[c];
                    });
            }

            return out;
        }

        function update() {
            renderSampleData();
            inputUpdate();

            let language = document.getElementById('language').value;
            let disp = document.getElementById('disp');
            let sample = document.getElementById('sample');
            disp.dir = (language === "fa") ? "rtl" : "ltr";
            sample.dir = (language === "fa") ? "rtl" : "ltr";
        }

        function inputUpdate() {
            let number = document.getElementById('number').value;
            let precision = document.getElementById('precision').value;
            let language = document.getElementById('language').value;
            let template = document.getElementById('template').value;
            let format = document.getElementById('format').value;
            let disp = document.getElementById('disp');
            disp.innerHTML = formatNumber(number, precision, template, language, format);
        }

        function generateRandomNumber(length) {
            if (length === 0) return '';
            let result = (Math.floor(Math.random() * 9) + 1).toString();
            for (let i = 1; i < length; i++) {
                result += Math.floor(Math.random() * 10).toString();
            }
            return result.toString();
        }

        function randomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min)
        }

        function renderSampleData() {
            const validCheckMark = " <span style='color:green'>&#10004;</span>";
            let res = "";
            let precision = document.getElementById('precision').value;
            let language = document.getElementById('language').value;
            let template = document.getElementById('template').value;
            let format = document.getElementById('format').value;
            let sample = document.getElementById('sample');

            let numbers = [];
            numbers.push(`-${generateRandomNumber(8)}.${generateRandomNumber(randomInt(3, 9))}`);
            numbers.push(`-${generateRandomNumber(4)}.${generateRandomNumber(randomInt(3, 9))}`);
            numbers.push(`-${generateRandomNumber(3)}.${generateRandomNumber(randomInt(3, 9))}`);
            numbers.push(`-${generateRandomNumber(2)}.${generateRandomNumber(randomInt(3, 9))}`);
            numbers.push(`-${generateRandomNumber(1)}.${generateRandomNumber(randomInt(3, 9))}`);
            numbers.push(`-0.${'0'.repeat(randomInt(10, 30))}${generateRandomNumber(randomInt(5, 9))}`);
            numbers.push(`-0.${'0'.repeat(randomInt(0, 10))}${generateRandomNumber(randomInt(5, 9))}`);
            numbers.push(`-0.${generateRandomNumber(7)}`);
            numbers.push(`0`);
            for (let fractionalZeros = 31; fractionalZeros >= 0; fractionalZeros--) {
                let randomFractionalDigits = generateRandomNumber(7);
                let numberString = `0.${'0'.repeat(fractionalZeros)}${randomFractionalDigits}`;
                numbers.push(numberString);
            }
            numbers.push(`1`);
            for (let i = 1; i <= 23; i++) {
                let randomWholeDigits = generateRandomNumber(i);
                let randomFractionalDigits = generateRandomNumber(7);
                let numberString = `${randomWholeDigits}.${randomFractionalDigits}`;
                numbers.push(numberString);
            }

            res += "<table><thead><tr>";
            res += "<th>Input</th>";
            res += "<th>Low Precision</th>";
            res += "<th>Medium Precision</th>";
            res += "<th>High Precision</th>";
            res += "<th>Auto</th>";
            res += "</tr></thead><tbody>";
            for (const number of numbers) {
                res += "<tr>";
                res += `<td>${number}</td>`;
                res += `<td>${formatNumber(number, "low", template, language, format)}</td>`;
                res += `<td>${formatNumber(number, "medium", template, language, format)}</td>`;
                res += `<td>${formatNumber(number, "high", template, language, format)}</td>`;
                res += `<td>${formatNumber(number, "auto", template, language, format)}</td>`;
                res += "</tr>";
            }
            res += "</tbody></table>";

            sample.innerHTML = res;
        }
    </script>
    <link href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/Vazirmatn-font-face.css" rel="stylesheet"
        type="text/css" />
    <style>
        body {
            font-family: Vazirmatn, sans-serif;
            padding: 20px;
            font-size: 20px;
            background-color: #222;
            color: #eee;
        }

        input,
        select {
            font-size: 25px;
            padding: 5px;
            margin-bottom: 10px;
            width: 100%;
            background-color: #444;
            color: #eee;
            border: 0 none;
        }

        input[type=button] {
            font-size: 15px;
            padding: 10px;
            margin: 20px auto;
            display: block;
            width: 200px;
            background-color: #0e5018;
            color: #eee;
        }

        table {
            width: 100%;
            font-size: 20px;
        }

        .invalid {
            color: red;
        }

        .invalid-box {
            border-radius: 6px;
            border: 1px solid;
            font-size: 80%;
            display: inline-block;
            padding: 0 5px;
        }

        #disp {
            background-color: #1b1f34;
            text-align: center;
            font-size: 50px;
        }

        #disp i {
            font-style: normal;
            color: green;
        }

        #sample th {
            border-bottom: 1px solid #aaa;
            font-size: 70%;
        }

        #sample td {
            text-align: center;
        }

        #sample i {
            font-style: normal;
            color: green;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            renderSampleData();
        });
    </script>
</head>

<body>
    <div style="width: 48%; float: left; margin-right: 2%;">
        precision:
        <select id="precision" name="precision" onchange="update()">
            <option value="high">High (Default)</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
        </select>
    </div>
    <div style="width: 50%; float: left;">
        language:
        <select id="language" name="language" onchange="update()">
            <option value="en">EN</option>
            <option value="fa">FA</option>
        </select>
    </div>
    <div style="width: 48%; float: left; margin-right: 2%;">
        template:
        <select id="template" name="template" onchange="update()">
            <option value="number">Number</option>
            <option value="usd">USD</option>
            <option value="irt">IRT</option>
            <option value="irr">IRR</option>
            <option value="percent">Percent</option>
        </select>
    </div>
    <div style="width: 50%; float: left;">
        format:
        <select id="format" name="format" onchange="update()">
            <option value="plain">Plain</option>
            <option value="html">HTML</option>
            <option value="markdown">Markdown</option>
        </select>
    </div>
    <div>
        number:
        <input id="number" name="number" type="number" autofocus onkeyup="inputUpdate()" onchange="inputUpdate()"
            value="" />
    </div>
    <div id="disp">0</div>
    <input type="button" onclick="update()" value="Resample" />
    <div id="sample"></div>
</body>

</html>
